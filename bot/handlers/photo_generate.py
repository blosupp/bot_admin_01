from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram import Bot
from datetime import datetime

from bot.states.post_states import PhotoPostState, EditPhotoPost, SchedulePostState
from bot.services.openai_service import generate_text
from bot.keyboards.generate_photo_keyboard import (
    generate_photo_action_keyboard,
    generate_photo_publish_keyboard,
    generate_photo_schedule_keyboard
)
from database.crud import (
    save_temp_post,
    get_temp_post,
    update_temp_post_caption,
    delete_temp_post,
    get_user_channels
)
from database.db import get_async_session
from database.models import ScheduledPost

router = Router()


@router.message(F.photo)
async def handle_photo_with_caption(message: Message, state: FSMContext):
    caption = message.caption or ""
    if not caption:
        await message.answer("‚ùì –î–æ–±–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ.")
        return

    await message.answer("‚úçÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç‚Ä¶")
    generated = await generate_text(caption)
    safe_caption = generated[:1024]
    file_id = message.photo[-1].file_id

    async with get_async_session() as session:
        temp_id = await save_temp_post(session, message.from_user.id, file_id, generated, caption)

    await state.update_data(
        file_id=file_id,
        post_text=generated,
        temp_post_id=temp_id
    )


    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
    kb = generate_photo_action_keyboard(temp_id)
    await message.answer_photo(photo=file_id, caption=safe_caption, reply_markup=kb)
    await state.set_state(PhotoPostState.confirming_post)


@router.callback_query(PhotoPostState.confirming_post, F.data.startswith("regen_temp:"))
async def cb_regen_caption(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    temp_id = int(callback.data.split(":")[1])

    async with get_async_session() as session:
        post = await get_temp_post(session, temp_id)
        if not post:
            await callback.message.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        new_caption = await generate_text(post.original)
        post.caption = new_caption
        await session.commit()

    kb = generate_photo_action_keyboard(temp_id)
    # –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –ø–æ–¥ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ç–æ
    await callback.message.edit_caption(caption=new_caption[:1024], reply_markup=kb)
    await state.set_state(PhotoPostState.confirming_post)


@router.callback_query(PhotoPostState.confirming_post, F.data.startswith("edit_temp:"))
async def cb_edit_caption(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    temp_id = int(callback.data.split(":")[1])

    async with get_async_session() as session:
        post = await get_temp_post(session, temp_id)
    await state.update_data(temp_id=temp_id)
    await state.set_state(EditPhotoPost.waiting_for_new_text)

    await callback.message.answer(f"‚úèÔ∏è –¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å—å:\n\n{post.caption}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é:")


@router.message(EditPhotoPost.waiting_for_new_text)
async def handle_new_caption(message: Message, state: FSMContext):
    data = await state.get_data()
    temp_id = data.get("temp_id")
    new_text = message.text

    async with get_async_session() as session:
        await update_temp_post_caption(session, temp_id, new_text)

    kb = generate_photo_action_keyboard(temp_id)
    await message.answer("‚úÖ –ü–æ–¥–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=kb)
    await state.set_state(PhotoPostState.confirming_post)


@router.callback_query(PhotoPostState.confirming_post, F.data == "confirm_photo_publish")
async def cb_confirm_publish(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await callback.answer()

    data = await state.get_data()
    file_id = data.get("file_id")
    caption = data.get("post_text")
    temp_id = data.get("temp_post_id")

    # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π:
    if not file_id or not caption or not temp_id:
        await callback.message.answer("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
    channels = await get_user_channels(callback.from_user.id)
    if not channels:
        await callback.message.answer("üì≠ –£ —Ç–µ–±—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        await state.clear()
        return

    # –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –æ–¥–∏–Ω ‚Äî —Å—Ä–∞–∑—É –ø—É–±–ª–∏–∫—É–µ–º
    if len(channels) == 1:
        channel_id = channels[0].channel_id
        await bot.send_photo(chat_id=channel_id, photo=file_id, caption=caption[:1024])
        # —É–¥–∞–ª—è–µ–º temp-–∑–∞–ø–∏—Å—å
        async with get_async_session() as session:
            await delete_temp_post(session, temp_id)
        await callback.message.answer("‚úÖ –§–æ—Ç–æ-–ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
        await state.clear()
    else:
        # –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤ ‚Äî –≤—ã–±–∏—Ä–∞–µ–º
        choices = [(ch.channel_id, ch.title) for ch in channels]
        kb = generate_photo_publish_keyboard(choices)
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", reply_markup=kb)
        await state.set_state(PhotoPostState.choosing_channel)


@router.callback_query(PhotoPostState.choosing_channel, F.data.startswith("photo_channel:"))
async def cb_photo_choose_channel(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await callback.answer()
    channel_id = int(callback.data.split(":")[1])
    await state.update_data(channel_id=channel_id)

    data = await state.get_data()
    file_id = data.get("file_id")
    caption = data.get("post_text")
    temp_id = data.get("temp_post_id")

    # –ø—É–±–ª–∏–∫—É–µ–º
    await bot.send_photo(chat_id=channel_id, photo=file_id, caption=caption[:1024])
    # —É–¥–∞–ª—è–µ–º TempPost
    async with get_async_session() as session:
        await delete_temp_post(session, temp_id)

    await callback.message.answer("‚úÖ –§–æ—Ç–æ-–ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
    await state.clear()


@router.callback_query(PhotoPostState.confirming_post, F.data.startswith("schedule_temp:"))
async def cb_schedule_temp(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    temp_id = int(callback.data.split(":")[1])
    await state.update_data(temp_post_id=temp_id)
    await state.set_state(SchedulePostState.choosing_datetime)

    await callback.message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–î–î.MM.–ì–ì–ì–ì –ß–ß:–ú–ú</code>",
        parse_mode="HTML",
        reply_markup=generate_photo_schedule_keyboard()
    )


@router.message(SchedulePostState.choosing_datetime)
async def handle_datetime_input(message: Message, state: FSMContext):
    user_input = message.text.strip()
    try:
        sched_dt = datetime.strptime(user_input, "%d.%m.%Y %H:%M")
        await state.update_data(scheduled_time=sched_dt)

        await message.answer(
            f"üóì –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ <b>{sched_dt.strftime('%d.%m.%Y %H:%M')}</b>.\n–ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª –∏–ª–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª.",
            parse_mode="HTML",
            reply_markup=generate_photo_schedule_keyboard()
        )
        await state.set_state(SchedulePostState.confirming)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:\n<code>–î–î.MM.–ì–ì–ì–ì –ß–ß:–ú–ú</code>", parse_mode="HTML")


@router.callback_query(SchedulePostState.confirming, F.data == "confirm_schedule")
async def cb_confirm_schedule(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()

    async with get_async_session() as session:
        scheduled = ScheduledPost(
            user_id=callback.from_user.id,
            channel_id=data["channel_id"],
            caption=data["post_text"],
            file_id=data["file_id"],
            scheduled_time=data["scheduled_time"]
        )
        session.add(scheduled)
        await session.commit()
        # —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ—Å—Ç
        await delete_temp_post(session, data["temp_post_id"])

    await callback.message.answer("‚úÖ –§–æ—Ç–æ-–ø–æ—Å—Ç –æ—Ç–ª–æ–∂–µ–Ω!")
    await state.clear()


@router.callback_query(PhotoPostState.confirming_post, F.data == "cancel_post")
async def cb_cancel(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    try:
        await callback.message.delete()
    except:
        pass



# –û—Ç–º–µ–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–æ—Ç–æ-—Ñ–ª–æ—É (–∫–æ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è üîÅ –ï—â—ë, ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, ‚ùå –û—Ç–º–µ–Ω–∞)
@router.callback_query(PhotoPostState.confirming_post, F.data == "cancel_post")
async def cb_cancel_photo(callback: CallbackQuery, state: FSMContext):
    await callback.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", show_alert=False)
    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∫–∞—Ä—É—Å–µ–ª—å —Å —Ñ–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        await callback.message.delete()
    except:
        pass
    await state.clear()

# –û—Ç–º–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å ‚Üí –≤–≤–æ–¥ –¥–∞—Ç—ã ‚Üí ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª/¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª)
@router.callback_query(SchedulePostState.confirming, F.data == "cancel_post")
async def cb_cancel_schedule(callback: CallbackQuery, state: FSMContext):
    await callback.answer("‚ùå –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –æ—Ç–º–µ–Ω—ë–Ω", show_alert=False)
    await state.clear()