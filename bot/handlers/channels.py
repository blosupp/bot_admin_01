from aiogram import Router, types
from aiogram.filters import Command

router = Router()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–≤ –±—É–¥—É—â–µ–º ‚Äî –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
user_channels = {}

@router.message(Command("add_channel"))
async def add_channel(message: types.Message):
    if not message.forward_from_chat:
        await message.answer("üì© –ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å.")
        return

    user_id = message.from_user.id
    channel_id = message.forward_from_chat.id
    channel_title = message.forward_from_chat.title

    user_channels.setdefault(user_id, []).append((channel_id, channel_title))
    await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª ¬´{channel_title}¬ª –¥–æ–±–∞–≤–ª–µ–Ω!")

@router.message(Command("my_channels"))
async def show_channels(message: types.Message):
    user_id = message.from_user.id
    channels = user_channels.get(user_id, [])
    if not channels:
        await message.answer("üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        return

    text = "üìã –¢–≤–æ–∏ –∫–∞–Ω–∞–ª—ã:\n\n"
    for idx, (chan_id, title) in enumerate(channels, 1):
        text += f"{idx}. {title} (`{chan_id}`)\n"

    await message.answer(text, parse_mode="Markdown")
