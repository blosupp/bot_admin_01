from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from bot.states.post_states import SchedulePostState
from database.crud import get_temp_post, delete_temp_post, create_scheduled_post
from database.crud import get_scheduled_posts_by_user

from database.crud import add_log

router = Router()

@router.message(SchedulePostState.confirming, F.text.lower() == "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def handle_confirm_schedule(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()

    scheduled_time = data.get("scheduled_time")
    channel_id = data.get("channel_id")

    if not scheduled_time or not channel_id:
        await message.answer("‚ùó –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    temp_post = await get_temp_post(user_id)
    if not temp_post:
        await message.answer("‚ùó –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await create_scheduled_post(
        user_id=user_id,
        channel_id=channel_id,
        caption=temp_post.caption,
        file_id=temp_post.file_id,
        scheduled_time=scheduled_time
    )

    await delete_temp_post(user_id)
    await add_log(
        user_id=user_id,
        action_type="schedule",
        description=f"–ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {scheduled_time} –≤ –∫–∞–Ω–∞–ª {channel_id}"
    )
    await message.answer("‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω. –í—Ä–µ–º–µ–Ω–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ —É–¥–∞–ª—ë–Ω.")
    await state.clear()


@router.message(SchedulePostState.choosing_channel)
async def handle_schedule_choose_channel(message: Message, state: FSMContext):
    try:
        channel_id = int(message.text.strip())  # üëà –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ —á–∏—Å–ª–æ–º.")
        return

    await state.update_data(channel_id=channel_id)

    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>01.07.2025 14:30</b>",
        parse_mode="HTML"
    )
    await state.set_state(SchedulePostState.choosing_datetime)


@router.message(F.text == "/scheduled")
async def show_scheduled_posts(message: Message):
    user_id = message.from_user.id
    posts = await get_scheduled_posts_by_user(user_id)

    if not posts:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.")
        return

    text = "<b>üìå –í–∞—à–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:</b>\n\n"
    for post in posts:
        time = post.scheduled_time.strftime("%d.%m.%Y %H:%M")
        preview = post.caption[:50] + "..." if post.caption else "üì∑ [–º–µ–¥–∏–∞]"
        text += f"üóì <b>{time}</b> ‚Üí <i>{preview}</i>\n"

    await message.answer(text, parse_mode="HTML")