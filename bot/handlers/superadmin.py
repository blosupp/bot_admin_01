from aiogram import Router, types
from aiogram.filters import Command
from database.crud import is_superadmin
from database.db import async_session
from database.models import ActionLog
from sqlalchemy import select, desc
from sqlalchemy import update
from database.crud import add_log
from database.models import User
from database.crud import get_user_role
from sqlalchemy import delete

from database.models import User

from database.crud import is_admin, is_superadmin


router = Router()

@router.message(Command("logs"))
async def view_logs(message: types.Message):
    user_id = message.from_user.id
    args = message.text.strip().split()

    if not await is_superadmin(user_id):
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞.")
        return

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä: /logs [—Ç–∏–ø]
    log_type = args[1] if len(args) > 1 else None

    async with async_session() as session:
        query = select(ActionLog).order_by(desc(ActionLog.created_at)).limit(30)

        if log_type:
            query = query.where(ActionLog.action_type == log_type)

        result = await session.execute(query)
        logs = result.scalars().all()

        if not logs:
            await message.answer("üì≠ –õ–æ–≥–∏ –ø—É—Å—Ç—ã.")
            return

        text = f"<b>üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è{' (' + log_type + ')' if log_type else ''}:</b>\n\n"

        for log in logs:
            if not log or not log.user_id:
                continue

            try:
                user_result = await session.execute(
                    select(User).where(User.id == log.user_id)
                )
                user = user_result.scalar_one_or_none()
                username = f"@{user.username}" if user and user.username else "(–Ω–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω)"
            except Exception:
                username = "(–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∏–∫–∞)"

            text += (
                f"üïí {log.created_at.strftime('%d.%m.%Y %H:%M')} | "
                f"{username} <code>{log.user_id}</code>\n"
                f"<b>{log.action_type}</b>: {log.description}\n\n"
            )

    await message.answer(text, parse_mode="HTML")


@router.message(Command("add_admin"))
async def add_admin(message: types.Message):
    user_id = message.from_user.id
    if not await is_superadmin(user_id):
        await message.answer("üö´ –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤.")
        return

    args = message.text.strip().split()
    if len(args) != 2 or not args[1].isdigit():
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin <user_id>")
        return

    target_id = int(args[1])
    async with async_session() as session:
        await session.execute(update(User).where(User.id == target_id).values(role="admin"))
        await session.commit()

    await add_log(user_id, "role_change", f"–ù–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω: {target_id}")
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω.")


@router.message(Command("remove_admin"))
async def remove_admin(message: types.Message):
    user_id = message.from_user.id
    if not await is_superadmin(user_id):
        await message.answer("üö´ –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Å–Ω–∏–º–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤.")
        return

    args = message.text.strip().split()
    if len(args) != 2 or not args[1].isdigit():
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_admin <user_id>")
        return

    target_id = int(args[1])
    async with async_session() as session:
        await session.execute(update(User).where(User.id == target_id).values(role="user"))
        await session.commit()

    await add_log(user_id, "role_change", f"–°–Ω—è—Ç –∞–¥–º–∏–Ω: {target_id}")
    await message.answer(f"‚òëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ç–µ–ø–µ—Ä—å –æ–±—ã—á–Ω—ã–π —é–∑–µ—Ä.")





@router.message(Command("add_user"))
async def add_user(message: types.Message):
    sender_id = message.from_user.id
    args = message.text.strip().split()

    if not await is_admin(sender_id):
        await message.answer("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    if len(args) != 2 or not args[1].isdigit():
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_user <user_id>")
        return

    new_user_id = int(args[1])
    async with async_session() as session:
        result = await session.execute(select(User).where(User.id == new_user_id))
        if result.scalar_one_or_none():
            await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return
        user = User(id=new_user_id, role="user")
        session.add(user)
        await session.commit()

    await add_log(sender_id, "user_add", f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user_id}")
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user_id} –¥–æ–±–∞–≤–ª–µ–Ω.")


@router.message(Command("remove_user"))
async def remove_user(message: types.Message):
    sender_id = message.from_user.id
    args = message.text.strip().split()

    if not await is_admin(sender_id):
        await message.answer("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    if len(args) != 2 or not args[1].isdigit():
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_user <user_id>")
        return

    target_id = int(args[1])
    target_role = await get_user_role(target_id)

    # ‚ö†Ô∏è –ê–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ –∏–ª–∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
    if target_role in ["admin", "superadmin"] and not await is_superadmin(sender_id):
        await message.answer("üö´ –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    async with async_session() as session:
        await session.execute(delete(User).where(User.id == target_id))
        await session.commit()

    await add_log(sender_id, "user_remove", f"–£–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id}")
    await message.answer(f"üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —É–¥–∞–ª—ë–Ω.")




@router.message(Command("users"))
async def list_users(message: types.Message):
    sender_id = message.from_user.id

    if not await is_admin(sender_id):
        await message.answer("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    async with async_session() as session:
        result = await session.execute(select(User).order_by(User.role, User.id))
        users = result.scalars().all()

    if not users:
        await message.answer("üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    text = "<b>üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    for user in users:
        nickname = f"@{user.username}" if user.username else "(–±–µ–∑ –Ω–∏–∫–∞)"
        text += f"üë§ <code>{user.id}</code> ‚Äî {nickname} ‚Äî <b>{user.role}</b>\n"

    await message.answer(text, parse_mode="HTML")



@router.message(Command("admins"))
async def list_admins(message: types.Message):
    sender_id = message.from_user.id

    if not await is_superadmin(sender_id):
        await message.answer("üö´ –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞.")
        return

    async with async_session() as session:
        result = await session.execute(
            select(User).where(User.role == "admin")
        )
        admins = result.scalars().all()

    if not admins:
        await message.answer("üì≠ –ê–¥–º–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    text = "<b>üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:</b>\n\n"
    for admin in admins:
        username = f"@{admin.username}" if admin.username else "(–±–µ–∑ –Ω–∏–∫–∞)"
        text += f"üîß {username} ‚Äî <code>{admin.id}</code>\n"

    await message.answer(text, parse_mode="HTML")

@router.message(Command("clear_logs"))
async def clear_logs(message: types.Message):
    if not await is_superadmin(message.from_user.id):
        await message.answer("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return

    async with async_session() as session:
        await session.execute(delete(ActionLog))
        await session.commit()

    await message.answer("üßπ –í—Å–µ –ª–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
