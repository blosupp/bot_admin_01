from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from bot.services.openai_service import generate_post_text
from database.crud import get_user_channels

router = Router()


class PostState(StatesGroup):
    choosing_channel = State()
    confirming_post = State()

# üìå /post ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–æ–º–ø—Ç—É
@router.message(Command("post"))
async def start_post(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    channels = await get_user_channels(user_id)

    if not channels:
        await message.answer("üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        return

    if len(channels) == 1:
        # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –æ–¥–∏–Ω ‚Äî —Å—Ä–∞–∑—É –≥–µ–Ω–µ—Ä–∏–º
        await state.update_data(channel_id=channels[0].channel_id)
        text = await generate_post_text(user_id)
        await state.update_data(post_text=text)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish")],
            [InlineKeyboardButton(text="‚ôªÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="regenerate")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_post")]
        ])

        await message.answer(
            f"<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</b>\n\n{text}",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        await state.set_state(PostState.confirming_post)
        return

    # –ò–Ω–∞—á–µ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–æ–≤
    keyboard = [
        [InlineKeyboardButton(text=ch.title, callback_data=f"post_channel:{ch.channel_id}")]
        for ch in channels
    ]

    await message.answer(
        "–í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(PostState.choosing_channel)


# üìç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–∞–Ω–∞–ª ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
@router.callback_query(F.data.startswith("post_channel:"))
async def generate_for_channel(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã Telegram –Ω–µ –≤—ã–¥–∞–ª timeout

    user_id = callback.from_user.id
    channel_id = int(callback.data.split(":")[1])
    await state.update_data(channel_id=channel_id)

    text = await generate_post_text(user_id)
    await state.update_data(post_text=text)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish")],
        [InlineKeyboardButton(text="‚ôªÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="regenerate")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_post")]
    ])

    await callback.message.answer(
        f"<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</b>\n\n{text}",
        parse_mode="HTML",
        reply_markup=keyboard
    )

    await state.set_state(PostState.confirming_post)


# üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
@router.callback_query(PostState.confirming_post, F.data == "regenerate")
async def regenerate_post(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    user_id = callback.from_user.id
    text = await generate_post_text(user_id)
    await state.update_data(post_text=text)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish")],
        [InlineKeyboardButton(text="‚ôªÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="regenerate")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_post")]
    ])

    await callback.message.edit_text(
        f"<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</b>\n\n{text}",
        parse_mode="HTML",
        reply_markup=keyboard
    )


# ‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
@router.callback_query(PostState.confirming_post, F.data == "publish")
async def publish_post(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await callback.answer()

    data = await state.get_data()
    channel_id = data.get("channel_id")
    post_text = data.get("post_text")

    if not post_text:
        await callback.message.edit_text("‚ùå –ü–æ—Å—Ç –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    try:
        await bot.send_message(chat_id=channel_id, text=post_text)
        await callback.message.edit_text("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n<code>{e}</code>",
            parse_mode="HTML"
        )

    await state.clear()


# ‚ùå –û—Ç–º–µ–Ω–∞
@router.callback_query(PostState.confirming_post, F.data == "cancel_post")
async def cancel_post(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    await callback.message.edit_text("‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
