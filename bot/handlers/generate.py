# ‚úÖ handlers/generate.py ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ-–ø–æ—Å—Ç–æ–≤

from aiogram import Router, types, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery

from bot.states.post_states import PostState, EditPhotoPost
from bot.services.openai_service import generate_text
from bot.keyboards.generate import generate_action_keyboard
from bot.config import OPENAI_API_KEY

from database.crud import (
    get_or_create_user,
    get_active_prompt,
    get_temp_post,
    get_user_channels,
    save_temp_post,
    update_temp_post_caption, delete_temp_post
)
from database.db import get_async_session

from openai import AsyncOpenAI

router = Router()
client = AsyncOpenAI(api_key=OPENAI_API_KEY)
user_generations = {}

# üìå /generate ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É
@router.message(F.text.lower() == "/generate")
async def generate_post(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "unknown"
    await get_or_create_user(user_id, username)

    prompt = await get_active_prompt(user_id)

    try:
        response = await client.chat.completions.create(
            model="gpt-4-turbo",
            messages=[
                {"role": "system", "content": prompt},
                {"role": "user", "content": "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ—Å—Ç –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é."}
            ],
            temperature=0.7,
            max_tokens=500
        )
        text = response.choices[0].message.content
        user_generations[user_id] = text
        await message.answer(text, reply_markup=generate_action_keyboard())

    except Exception as e:
        await message.answer(f"\u274c –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n\n{e}")


# üì∑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
@router.message(F.photo)
async def handle_photo_with_caption(message: Message):
    caption = message.caption
    if not caption:
        await message.answer("\u2753 –î–æ–±–∞–≤—å –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ.")
        return

    await message.answer("\u270d –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç...")
    generated_text = await generate_text(caption)
    safe_caption = generated_text[:1024]
    file_id = message.photo[-1].file_id

    async with get_async_session() as session:
        temp_id = await save_temp_post(session, message.from_user.id, file_id, generated_text, caption)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"publish_temp:{temp_id}")],
        [InlineKeyboardButton(text="‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_temp:{temp_id}")],
        [InlineKeyboardButton(text="‚ôª –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=f"regen_temp:{temp_id}")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_temp:{temp_id}")]
    ])

    await message.answer_photo(photo=file_id, caption=safe_caption, reply_markup=kb)


# ‚úèÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞
@router.callback_query(F.data.startswith("edit_temp:"))
async def edit_temp_post(callback: CallbackQuery, state: FSMContext):
    temp_id = int(callback.data.split(":")[1])
    async with get_async_session() as session:
        post = await get_temp_post(session, temp_id)

    await state.set_state(EditPhotoPost.waiting_for_new_text)
    await state.update_data(temp_id=temp_id)
    await callback.message.answer(f"\U0001f4dd –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n\n{post.caption}\n\n‚úè –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π:")


# üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.message(EditPhotoPost.waiting_for_new_text)
async def handle_new_caption(message: Message, state: FSMContext):
    data = await state.get_data()
    temp_id = data.get("temp_id")
    new_text = message.text
    async with get_async_session() as session:
        await update_temp_post_caption(session, temp_id, new_text)
    await message.answer("\u2705 –û–±–Ω–æ–≤–ª–µ–Ω–æ. –ù–∞–∂–º–∏ ¬´–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å¬ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
    await state.clear()


# ‚ôª –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏
@router.callback_query(F.data.startswith("regen_temp:"))
async def regenerate_caption(callback: CallbackQuery):
    temp_id = int(callback.data.split(":")[1])
    async with get_async_session() as session:
        post = await get_temp_post(session, temp_id)
        if not post:
            await callback.message.answer("\u274c –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        new_caption = await generate_text(post.original)
        post.caption = new_caption
        await session.commit()
    await callback.message.answer("\u267b –ü–æ—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞–Ω–æ–≤–æ. –ú–æ–∂–µ—à—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å.")


# ‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–Ω–∞–ª–æ–≤
@router.callback_query(F.data.startswith("publish_temp:"))
async def choose_channel_or_publish(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await callback.answer()
    temp_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id

    async with get_async_session() as session:
        post = await get_temp_post(session, temp_id)
        channels = await get_user_channels(user_id)

    if not post or not channels:
        await callback.message.answer("\u274c –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        return

    await state.update_data(file_id=post.file_id, post_text=post.caption)

    if len(channels) == 1:
        await state.update_data(channel_id=channels[0].channel_id)
        await publish_post_to_channel(callback, state, bot)
        return

    keyboard = [
        [InlineKeyboardButton(text=ch.title, callback_data=f"photo_channel:{ch.channel_id}")]
        for ch in channels
    ]
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await state.set_state(PostState.choosing_channel)


# üìÇ –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
@router.callback_query(F.data.startswith("photo_channel:"))
async def photo_choose_channel(callback: CallbackQuery, state: FSMContext):
    channel_id = int(callback.data.split(":")[1])
    await callback.answer()
    await state.update_data(channel_id=channel_id)
    data = await state.get_data()

    file_id = data.get("file_id")
    post_text = data.get("post_text")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="\u2705 –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="confirm_photo_publish")],
        [InlineKeyboardButton(text="\u274c –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_post")]
    ])
    await callback.message.answer_photo(photo=file_id, caption=post_text[:1024], reply_markup=keyboard)
    await state.set_state(PostState.confirming_post)


# üì¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥)
@router.callback_query(PostState.confirming_post, F.data == "confirm_photo_publish")
async def publish_post_to_channel(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await callback.answer()
    data = await state.get_data()

    channel_id = data.get("channel_id")
    post_text = data.get("post_text")
    file_id = data.get("file_id")

    try:
        # ‚úÖ –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
        await bot.send_photo(chat_id=channel_id, photo=file_id, caption=post_text[:1024])

        # ‚úÖ –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Äî –Ω–æ –ù–ï —á–µ—Ä–µ–∑ edit_text!
        await callback.message.answer("‚úÖ –§–æ—Ç–æ-–ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")

    except Exception as e:
        # ‚ùó –û—à–∏–±–∫—É —Ç–æ–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞:\n<code>{e}</code>", parse_mode="HTML")

    await state.clear()


@router.callback_query(F.data.startswith("delete_temp:"))
async def delete_temp(callback: CallbackQuery):
    temp_id = int(callback.data.split(":")[1])

    async with get_async_session() as session:
        await delete_temp_post(session, temp_id)

    try:
        await callback.message.delete()
    except Exception:
        await callback.message.answer("‚úÖ –ü–æ—Å—Ç —É–¥–∞–ª—ë–Ω (–Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ).")
