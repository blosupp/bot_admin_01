from aiogram import Router, types, F
from aiogram.filters import Command
from bot.services.openai_service import generate_text
from bot.keyboards.generate import generate_action_keyboard, generate_publish_keyboard
from bot.handlers.prompt import user_prompts
from bot.config import TEST_CHANNEL_ID
from bot.handlers.channels import user_channels
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import  StatesGroup, State

class PostState(StatesGroup):
    waiting_for_edit = State()

router = Router()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
user_generations = {}


@router.message(Command("generate"))
async def handle_generate(message: types.Message):
    user_id = message.from_user.id
    prompt = user_prompts.get(user_id, "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞.")
    await message.answer("‚úçÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç...")

    result = await generate_text(prompt)
    user_generations[user_id] = result

    await message.answer(result, reply_markup=generate_action_keyboard())


@router.callback_query(F.data.in_(["regenerate", "confirm", "cancel"]))
async def handle_generate_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    action = callback.data

    if action == "regenerate":
        prompt = user_prompts.get(user_id, "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –Ω–æ–≤—ã–π –ø–æ—Å—Ç.")
        new_result = await generate_text(prompt)
        user_generations[user_id] = new_result

        try:
            await callback.answer("üîÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–Ω–æ–≤–æ")
        except:
            pass

        await callback.message.edit_text(new_result, reply_markup=generate_action_keyboard())


    elif action == "confirm":
        channels = user_channels.get(user_id)
        if not channels:
            await callback.answer("‚ùó –£ —Ç–µ–±—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
            return
        await callback.message.edit_reply_markup(reply_markup=generate_publish_keyboard(channels))
        try:
            await callback.answer("üìã –í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        except:
            pass
    elif action == "cancel":
        user_generations.pop(user_id, None)
        try:
            await callback.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        except:
            pass
        await callback.message.edit_reply_markup(reply_markup=None)


@router.callback_query(F.data.startswith("publish:"))
async def publish_to_channel(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    channel_id = int(callback.data.split(":")[1])
    text = user_generations.get(user_id)

    if not text:
        await callback.answer("‚ùå –ù–µ—á–µ–≥–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å")
        return

    try:
        await callback.bot.send_message(channel_id, text)
        await callback.answer("‚úÖ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    await callback.message.edit_reply_markup(reply_markup=None)


@router.callback_query(F.data == "edit")
async def handle_edit_request(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:")
    await state.set_state(PostState.waiting_for_edit)


@router.message(PostState.waiting_for_edit)
async def receive_edited_text(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_generations[user_id] = message.text  # –∑–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    await message.answer("‚úÖ –ü–æ—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω. –í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")

    from bot.handlers.channels import user_channels
    channels = user_channels.get(user_id, [])

    if channels:
        from bot.keyboards.generate import generate_publish_keyboard
        await message.answer(message.text, reply_markup=generate_publish_keyboard(channels))
    else:
        await message.answer("‚ùó –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")

    await state.clear()
