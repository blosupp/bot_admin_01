from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from bot.states.post_states import TextPostState, EditTextPost  # —Å–æ–∑–¥–∞–¥–∏–º —ç—Ç–∏ —Å—Ç–µ–π—Ç—ã
from bot.services.openai_service import generate_text
from bot.keyboards.generate_text_keyboard import generate_text_action_keyboard
from aiogram import Router, types, F
from aiogram.filters import Command
router = Router()

# –®–∞–≥ 1: –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞

@router.message(Command(commands=['generate', 'generate_text']))
async def cmd_generate_text(message: types.Message, state: FSMContext):
    await message.answer("üñã –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞:")
    await state.set_state(TextPostState.waiting_for_prompt)

# –®–∞–≥ 2: –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏ –¥–µ—Ä–≥–∞–µ–º OpenAI
@router.message(TextPostState.waiting_for_prompt)
async def handle_text_prompt(message: types.Message, state: FSMContext):
    prompt = message.text
    generated = await generate_text(prompt)
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM data
    await state.update_data(prompt=prompt, generated=generated)
    kb = generate_text_action_keyboard()
    await message.answer(f"üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{generated}", reply_markup=kb)
    await state.set_state(TextPostState.confirming)

# –®–∞–≥ 3: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline-–∫–Ω–æ–ø–æ–∫ ("–ï—â—ë", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
# ‚Äî regen
@router.callback_query(TextPostState.confirming, F.data == "regen_text")
async def cb_regen_text(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    prompt = data['prompt']
    new_text = await generate_text(prompt)
    await state.update_data(generated=new_text)
    kb = generate_text_action_keyboard()
    await callback.message.edit_text(f"üìù –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:\n\n{new_text}", reply_markup=kb)
    await callback.answer()

# ‚Äî edit
@router.callback_query(TextPostState.confirming, F.data == "edit_text")
async def cb_edit_text(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ–∫—Å—Ç–∞:")
    await state.set_state(EditTextPost.waiting_for_new_text)
    await callback.answer()

@router.message(EditTextPost.waiting_for_new_text)
async def handle_new_text(message: types.Message, state: FSMContext):
    new = message.text
    await state.update_data(generated=new)
    kb = generate_text_action_keyboard()
    await message.answer(f"‚úÖ –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω:\n\n{new}", reply_markup=kb)
    await state.set_state(TextPostState.confirming)

# ‚Äî confirm
@router.callback_query(TextPostState.confirming, F.data == "confirm_text_publish")
async def cb_confirm_text(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    final_text = data['generated']
    # —Ç—É—Ç –≤—Å—Ç–∞–≤—å –ª–æ–≥–∏–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª)
    await callback.message.answer(f"üì£ –ü—É–±–ª–∏–∫—É—é:\n\n{final_text}")
    await state.clear()
    await callback.answer()
