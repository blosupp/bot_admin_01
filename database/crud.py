from sqlalchemy import select, update, delete
from database.db import AsyncSessionLocal
from database.models import User, Prompt, Channel, TempPost
from sqlalchemy.ext.asyncio import AsyncSession
from database.models import Message
from database.models import ScheduledPost
from database.db import async_session
from database.db import get_async_session
from sqlalchemy.orm import joinedload


from sqlalchemy import select, desc


from database.models import ActionLog
from datetime import datetime

# üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
async def get_or_create_user(user_id: int, username: str):
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(User).where(User.id == user_id))
        user = result.scalars().first()
        if user:
            return user
        user = User(id=user_id, username=username)
        session.add(user)
        await session.commit()
        return user


async def get_active_prompt(session: AsyncSession, user_id: int) -> Prompt | None:
    result = await session.execute(
        select(Prompt).where(Prompt.user_id == user_id, Prompt.is_active == True)
    )
    return result.scalar_one_or_none()

# ‚úçÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ (—Å—Ç–∞—Ä—ã–π —Å—Ç–∞–Ω–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º)
async def set_active_prompt(session: AsyncSession, user_id: int, text: str):
    await session.execute(
        update(Prompt)
        .where(Prompt.user_id == user_id, Prompt.is_active == True)
        .values(is_active=False)
    )
    session.add(Prompt(user_id=user_id, text=text, is_active=True))
    await session.commit()

# üì° –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def add_channel(owner_id: int | None, title: str, channel_id: int):
    if owner_id is None:
        print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π owner_id ‚Äî –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º.")
        return

    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Channel).where(Channel.owner_id == owner_id, Channel.channel_id == channel_id)
        )
        existing = result.scalar_one_or_none()

        if existing:
            print("‚ö†Ô∏è –ö–∞–Ω–∞–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        channel = Channel(owner_id=owner_id, title=title, channel_id=channel_id)
        session.add(channel)
        await session.commit()

# üìã –ü–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user_channels(user_id: int):
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Channel).where(Channel.owner_id == user_id)
        )
        return result.scalars().all()

# üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª
async def delete_channel(channel_id: int, owner_id: int):
    async with AsyncSessionLocal() as session:
        await session.execute(
            delete(Channel).where(Channel.id == channel_id, Channel.owner_id == owner_id)
        )
        await session.commit()

# üìã –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
async def get_all_prompts(user_id: int):
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Prompt)
            .where(Prompt.user_id == user_id)
            .order_by(Prompt.id.desc())
        )
        return result.scalars().all()

# üü¢ –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–º–ø—Ç –∞–∫—Ç–∏–≤–Ω—ã–º
async def activate_prompt(prompt_id: int, user_id: int):
    async with AsyncSessionLocal() as session:
        # –°–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π
        await session.execute(
            update(Prompt)
            .where(Prompt.user_id == user_id)
            .values(is_active=False)
        )
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤—ã–π
        await session.execute(
            update(Prompt)
            .where(Prompt.id == prompt_id, Prompt.user_id == user_id)
            .values(is_active=True)
        )
        await session.commit()

# ‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–ø—Ç
async def delete_prompt(prompt_id: int, user_id: int):
    async with AsyncSessionLocal() as session:
        await session.execute(
            delete(Prompt)
            .where(Prompt.id == prompt_id, Prompt.user_id == user_id)
        )
        await session.commit()


# üí¨ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
async def add_message(session: AsyncSession, user_id: int, role: str, content: str):
    session.add(Message(user_id=user_id, role=role, content=content))
    await session.commit()

# üß† –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
async def get_last_messages(session: AsyncSession, user_id: int, limit: int = 10) -> list[Message]:
    result = await session.execute(
        select(Message)
        .where(Message.user_id == user_id)
        .order_by(Message.id.desc())
        .limit(limit)
    )
    return list(reversed(result.scalars().all()))

# üß† –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
async def delete_user_messages(user_id: int, session: AsyncSession):
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã messages
    """
    stmt = delete(Message).where(Message.user_id == user_id)
    await session.execute(stmt)
    await session.commit()



async def toggle_user_memory(user_id: int, session: AsyncSession) -> bool:
    """
    –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ñ–ª–∞–≥ use_memory. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
    """
    query = select(User).where(User.id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        user = User(id=user_id)
        session.add(user)
        await session.commit()
        await session.refresh(user)

    user.use_memory = not user.use_memory
    await session.commit()
    return user.use_memory

async def get_user_memory_flag(user_id: int, session: AsyncSession) -> bool:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –ø–∞–º—è—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
    """
    query = select(User).where(User.id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    return user.use_memory if user else True


async def save_temp_post(session, user_id: int, file_id: str, caption: str) -> int:
    post = TempPost(user_id=user_id, file_id=file_id, caption=caption[:4000])
    session.add(post)
    await session.commit()
    await session.refresh(post)
    return post.id

async def get_temp_post(session, post_id: int) -> TempPost | None:
    return await session.get(TempPost, post_id)


async def save_temp_post(session, user_id: int, file_id: str, caption: str, original: str) -> int:
    post = TempPost(user_id=user_id, file_id=file_id, caption=caption[:4000], original=original[:4000])
    session.add(post)
    await session.commit()
    await session.refresh(post)
    return post.id

async def get_temp_post(session, post_id: int):
    return await session.get(TempPost, post_id)

async def update_temp_post_caption(session, post_id: int, new_caption: str):
    post = await session.get(TempPost, post_id)
    if post:
        post.caption = new_caption
        await session.commit()


# –£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –∏–∑ –ë–î
async def delete_temp_post(session, post_id: int):
    post = await session.get(TempPost, post_id)
    if post:
        await session.delete(post)
        await session.commit()

async def get_user_scheduled_posts(session: AsyncSession, user_id: int):
    stmt = select(ScheduledPost).where(
        ScheduledPost.user_id == user_id,
        ScheduledPost.sent == False   # üî• –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!
    ).order_by(ScheduledPost.scheduled_time)
    result = await session.execute(stmt)
    return result.scalars().all()

async def delete_scheduled_post(session: AsyncSession, post_id: int):
    post = await session.get(ScheduledPost, post_id)
    if post:
        await session.delete(post)
        await session.commit()
        return True
    return False


# üîç –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ—Å—Ç
async def get_temp_post(user_id: int) -> TempPost | None:
    async with async_session() as session:
        result = await session.execute(
            select(TempPost).where(TempPost.user_id == user_id)
        )
        return result.scalar_one_or_none()
# üóë –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ—Å—Ç
async def delete_temp_post(user_id: int):
    async with async_session() as session:
        await session.execute(
            delete(TempPost).where(TempPost.user_id == user_id)
        )
        await session.commit()

# üìå –°–æ–∑–¥–∞—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ—Å—Ç
async def create_scheduled_post(user_id: int, channel_id: int, caption: str, file_id: str, scheduled_time):
    async with async_session() as session:
        post = ScheduledPost(
            user_id=user_id,
            channel_id=channel_id,
            caption=caption,
            file_id=file_id,
            scheduled_time=scheduled_time
        )
        session.add(post)
        await session.commit()


async def get_scheduled_posts_by_user(user_id: int):
    async with async_session() as session:
        result = await session.execute(
            select(ScheduledPost)
            .where(ScheduledPost.user_id == user_id)
            .order_by(ScheduledPost.scheduled_time)
        )
        return result.scalars().all()


async def delete_user_messages(user_id: int):
    async with async_session() as session:
        await session.execute(delete(Message).where(Message.user_id == user_id))
        await session.commit()

async def add_log(user_id: int, action_type: str, description: str = ""):
    """
    –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥ –¥–µ–π—Å—Ç–≤–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param action_type: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'generate', 'publish', 'delete', 'login')
    :param description: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    """
    async with async_session() as session:
        log = ActionLog(
            user_id=user_id,
            action_type=action_type,
            description=description,
            created_at=datetime.utcnow()
        )
        session.add(log)
        await session.commit()


async def get_user_role(user_id: int) -> str:
    async with async_session() as session:
        result = await session.execute(select(User.role).where(User.id == user_id))
        role = result.scalar_one_or_none()
        return role or "user"

async def is_superadmin(user_id: int) -> bool:
    return await get_user_role(user_id) == "superadmin"

async def is_admin(user_id: int) -> bool:
    return await get_user_role(user_id) in ["admin", "superadmin"]

async def get_user_by_id(user_id: int):
    async with get_async_session() as session:
        result = await session.execute(select(User).where(User.id == user_id))
        return result.scalar_one_or_none()

async def get_last_logs(limit: int = 10):
    async with get_async_session() as session:
        result = await session.execute(
            select(ActionLog).options(joinedload(ActionLog.user)).order_by(desc(ActionLog.created_at)).limit(limit)
        )
        return result.scalars().all()

async def clear_logs():
    async with get_async_session() as session:
        await session.execute(delete(ActionLog))
        await session.commit()

async def get_all_users():
    async with get_async_session() as session:
        result = await session.execute(select(User))
        return result.scalars().all()

async def add_log(user_id: int, action_type: str, description: str):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É –ª–æ–≥–æ–≤.
    """
    async with get_async_session() as session:
        log = ActionLog(
            user_id=user_id,
            action_type=action_type,
            description=description
        )
        session.add(log)
        await session.commit()